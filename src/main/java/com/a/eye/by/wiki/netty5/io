一、Linux网络IO介绍
1、阻塞IO模型
最常用的IO模型就是阻塞IO模型，默认情况下，所有的文件操作都是阻塞的。以套接口为例，在简称空间中调用recvfrom，直到数据准备好才
返回，期间一直等待。我们就说进程在调用recvfrom开始到它返回的整段时间内是被阻塞的。
2、非阻塞IO模型
recvfrom从应用层到内核的时候，如果该缓冲区没有数据的话，就直接返回一个ewouldblock错误，一般都对非阻塞IO模型进行轮训检查这个状态，看
内核是不是有数据到来。
3、IO复用模型
Linux提供select/poll，进程通过将一个或者多个fd传递给select或者poll系统调用，阻塞在select，这样select/poll可以帮我们侦测许多fd是否就绪，
但是select/poll是顺序扫描fd是否就绪，而且支持的fd数量有限。linux还提供了一个epoll系统调用，epoll是基于事件驱动方式，而不是顺序扫描，当有fd
就绪时，立即回调函数rollback。
4、信号驱动IO模型
首先开启套接口信号驱动IO功能，并通过谢哦哪天调用sigaction执行一个信号处理函数（此系统调用立即返回，进程继续工作，它是非阻塞的）。当数据准备就绪时
就为改进程生成一个sigio信号。随机可以在信号处理程序中调用recvfrom来读数据，并通知主循环函数处理数据。
5、异步IO
告知内核启动某个操作，并让内核在整个操作完成后（包括将数据从内核拷贝到用户自己的缓冲区）通知我们，这种模型与信号驱动模型的区别是：信号驱动IO，由内核通知
我们核实可以启动一个IO操作，异步IO模型，由内核通知我们IO操作何时完成。

二、IO多路复用选择器
1、与多线程、多进程相比，IO多路复用最大的优势是系统开销少，系统不需要建立新的进程或者线程，也不必维护这些线程或者进程。IO复用使用场景：
1):服务器需要同时处理多个处于监听状态和多个连接状态的套接字。
2):服务器需要处理多种网络协议套接字。
2、支持IO多路复用的系统包括：select、pselect、poll、epoll

三、epoll一些改进：
1、支持一个进程打开的socket描述符FD不受限。select有个比较大的缺陷是一个进程打开的FD是有限制的，默认是2048。epoll所支持的FD的上限是最大可以
打开文件的数目。
2、select、poll的IO效率可能随着FD数目增加而线性下降，但是epoll不会存在这个问题。epoll只会对活跃的socket进行操作。这是因为内核中epoll是根据
每个fd上面的callback函数实现的。只有活跃的socket才会调用callback函数。
3、epoll通过mmap加速内核与用户空间的消息传递，无论是select、poll还是epoll都需要内核把消息通知用户空间，为了避免不必要的内存拷贝，epoll通过内核
与用户空间mmap同一块内存实现。
