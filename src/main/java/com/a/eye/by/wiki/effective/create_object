一、考虑用静态工场方法替换构造器
1、静态工厂方法与构造器第一大优势是，它们有名称。
2、静态工厂方法与构造器第二大优势是，不必在每次调用他们的时候都创建一个新对象。可以使得不可变对象预先构造好的实例，或者缓存起来，进行重复利用。静态工厂方法能够重复的调用返回对象。
3、静态工厂方法与构造器第三大优势是，它们可以返回原返回类型任意子类型的对象。这样在选择返回对象类型时有了更大的灵活性。
4、静态工厂方法与构造器第四大优势是，在创建参数化类型实例时，他们使用代码变的更加整洁。
5、静态构造方法的缺点：
	类如果不含有公有的或者受保护的构造器，就不能被子类化。
	他们与其他静态方法没有任何区别。

二、遇到多个构造器参数时，要考虑用构建器
如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是不错的选择，特别是当大多数的参数都是可选的时候，与使用传统的重叠构造器模式相比，Builder模式的客户端代码更加容易阅读和编写，也比
Javabeans更加安全。

三、使用私有构造器或者枚举类型强化Singleton属性
单元素的枚举类型，已经成为实现Singleton的最佳方法。

四、通过私有构造器强化不可实例化的类。

五、避免创建不必要的对象
1、一般情况下最好能重用对象，而不是每次需要时都重新创建一个新对象。
2、重用不可变对象，重用不会被修改的可变对象。

六、消除过期对象的引用
1、只要类自己管理内存，需要警惕内存泄露问题
2、内存泄露另一个来源是缓存。
3、内存泄露第三个来源是监听器和其他回调。

七、避免使用终结方法
1、终结方法finalizer通常是不可预测的，也是很危险的，没必要使用。
2、不要依赖终结方法更新重要的持久状态
3、使用终结方法有很大的性能损失
4、显示的终结方法，通常与try finally结构联合起来使用，以确保及时终止。