一、WeakHashMap
它的特殊之处在于 WeakHashMap 里的entry可能会被GC自动删除，即使程序员没有调用remove()或者clear()方法。
使用 WeakHashMap 时，即使没有显示的添加或删除任何元素，也可能发生如下情况：
	调用两次size()方法返回不同的值；
	两次调用isEmpty()方法，第一次返回false，第二次返回true；
	两次调用containsKey()方法，第一次返回true，第二次返回false，尽管两次使用的是同一个key；
	两次调用get()方法，第一次返回一个value，第二次返回null，尽管两次使用的是同一个对象。
	
二、WeekHashMap用途：
WeekHashMap 的这个特点特别适用于需要缓存的场景。在缓存场景下，由于内存是有限的，不能缓存所有对象；
对象缓存命中可以提高系统效率，但缓存MISS也不会造成错误，因为可以通过计算重新得到。

三、原理
要明白 WeekHashMap 的工作原理，还需要引入一个概念：弱引用（WeakReference）。我们都知道Java中内存是通过GC自动管理的，GC会在程序运行过程中自动判断哪些对象是可以被回收的，并在合适的时机进行内存释放。
GC判断某个对象是否可被回收的依据是，是否有有效的引用指向该对象。如果没有有效引用指向该对象（基本意味着不存在访问该对象的方式），那么该对象就是可回收的。这里的“有效引用”并不包括弱引用。
也就是说，虽然弱引用可以用来访问对象，但进行垃圾回收时弱引用并不会被考虑在内，仅有弱引用指向的对象仍然会被GC回收。
WeakHashMap 内部是通过弱引用来管理entry的，弱引用的特性对应到 WeakHashMap 上意味着什么呢？将一对key, value放入到 WeakHashMap 里并不能避免该key值被GC回收，
除非在 WeakHashMap 之外还有对该key的强引用。