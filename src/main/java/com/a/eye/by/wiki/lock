1、Lock能完成几乎所有synchronized的功能，并有一些后者不具备的功能，如锁投票、定时锁等候、可中断锁等候等。
2、synchronized 是Java 语言层面的，是内置的关键字；Lock 则是JDK 5中出现的一个包，在使用时，synchronized 同步的代码块可以由JVM自动释放；Lock 需要程序员在finally块中手工释放，如果不释放，可能会引起难以预料的后果
二、主内存和工作内存：
1、Java内存模型中规定了所有的变量都存储在主内存中，每个线程还有自己的工作内存，线程的工作内存，保存了该线程使用到的主内存副本拷贝，线程对变量的所有操作必须在工作内存中，而不能直接读写主内存中的变量，
不同线程之间无法直接访问对方工作内存中的变量，线程间值的传递均需要通过主内存来完成。
三、什么是自旋锁：
自旋锁jdk1.6后默认自动开启，基于之前的观察，共享数据的锁定状态只会持续很短的时间，为了这一段时间而去挂起和恢复线程有点浪费，然后面请求锁的那个线程稍等一会，但是不放弃处理器的执行时间，看看只有线程的锁
是否能很快释放。为了让线程等待，所以需要让线程执行一个忙循环自旋操作。
四、锁消除
虚拟机即使编译器在运行时，对于代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。如果判断一段代码，在堆上的数据都不会逃逸，被其他线程访问到，那么认为是线程私有的，同步加锁也就没有必要了。
五、锁粗化
原则上，在编写代码时，推荐将同步块的作用范围限制的尽量小，仅仅在共享数据的实际作用域才进行同步，这样目的是使得需要同步的操作尽可能小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁。但是如果一系列的连续
操作都对同一个对象反复加锁和解锁，甚至锁出现在循环体内，及时没有线程竞争，频繁的进行互斥操作也会带来性能损耗。
六、偏向锁
偏向锁意思是这个锁会偏向第一个获取它的线程，如果在接下来的过程中，该锁没有被其他线程获取，则只有偏向锁的线程将永远不需要进行同步，偏向锁可以提高带有同步但是没有竞争的程序的性能。偏向锁也不一定总是对程序
有利的，如果程序中的锁大部分都是被多个不同的线程访问，那么偏向模式就是多余的。
七、volatile变量
volatile能够实现可见性，但是不能保证原子性。
八、CAS
CAS包括三个操作数，内存位置，预期旧值，新值。如果内存位置的值和预期的旧值相同，那么使用新值替换旧值。
九、如何实现互斥同步？
java中最基本的互斥就是synchronized关键字，synchronized在经过编译后，会在同步块的前后分别形成monitorenter和moitorexit这两个字节码指令。在执行monitorenter指令时，首先要去尝试获取对象的锁，
如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会把锁计数器减1，当计数器为0时，锁就被释放了。如果获取对象的锁失败，当当前线程就要阻塞等待，
知道对象的锁被另一个线程释放为止。synchronized对于同一个线程来说是可重入的，不会出现自己把自己锁死的问题。除了synchronized指望，JUC中的Lock也能实现互斥同步，ReentrantLock，写法上更加可见，
lock和unlock配合try/finally来配合完成，ReentrantLock比synchronized有几个高级的特性。
十、ReentrantLock的高级特性有那几个？
1、等待可中断，当持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，改为处理其他事情；
2、可以实现公平锁，公平锁指多个线程在等待同一个锁时，必须按照申请锁的顺序依次获得锁，synchronized是非公平锁，ReentrantLock默认也是非公平的，只不过可以通过构造函数来制定实现公平锁；
3、锁绑定多个条件，ReentrantLock对象可以同时绑定多个Condition对象，在synchronized中，锁对象的wait/notify/notifyall方法可以实现一个隐含的条件，如果要多一个条件关联的时候，就需要额外的增加一个锁；
十一、关于sunchronized的几个注意点？
1、当一个线程访问object的一个synchronized(this)同步代码块时， 另一个线程仍然可以访问该object中的非synchronized(this)同步代码块；
2、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时， 一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块；
3、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时， 其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞；
4、Java中的每一个对象都可以作为锁，对于同步方法，锁是当前实例对象，对于静态同步方法，锁是当前对象的Class对象，对于同步方法块，锁是Synchonized括号里配置的对象；
十二、JAVA concurrent包下的类：
Executors
 Executor
 ExecutorService
 ScheduledExecutorService
 Callable
 Future
 ScheduledFuture
 Delayed
 CompletionService
 ThreadPoolExecutor
 ScheduledThreadPoolExecutor
 AbstractExecutorService
 Executors
 FutureTask
 ExecutorCompletionService
Queues
 BlockingQueue
 ConcurrentLinkedQueue
 LinkedBlockingQueue
 ArrayBlockingQueue
 SynchronousQueue
 PriorityBlockingQueue
 DelayQueue
Concurrent Collections
 ConcurrentMap
 ConcurrentHashMap
 CopyOnWriteArray{List,Set}
Synchronizers
 CountDownLatch
 Semaphore
 Exchanger
 CyclicBarrier
Timing
 TimeUnit
Locks
 Lock
 Condition
 ReadWriteLock
 AbstractQueuedSynchronizer
 LockSupport
 ReentrantLock
 ReentrantReadWriteLock
Atomics
 Atomic[Type], Atomic[Type]Array
 Atomic[Type], FieldUpdater
 Atomic{Markable, Stampable}Reference
 



