四十五、将局部变量的作用域最小化
1、要使局部变量的作用域最小化，最有力的方法是在第一次使用它的地方声明。
2、忌讳每个局部变量的声明都包含一个初始化表达式。

四十六、for-each循环优先于传统的for循环

四十七、了解和使用类库
1、通过使用标准类库，可以充分利用这些编写标准类库的专家的知识，以及在你之前的其他人使用的经验。

四十八、如果要精确的答案，请避免使用float和double
1、float和double类型尤其不适合用于货币计算。
如果想让系统来记录十进制小数点，并且不介意因为不实用基本数据类型带来的不便，就请使用BigDecimal。使用BigDecimal还有一些额外的好处，它允许你
完全控制舍入，每当一个操作涉及舍入的时候，它允许你从8种舍入模式中选择其一。如果性能非常关键，并且你不介意自己记录十进制小数点，就可以使用int，如果
不超过18位数字，就可以使用long，如果数字可能超过18位，就必须使用BigDecimal。

四十九、基本类型优先于装箱基本类型
基本类型与装箱类型的区别
1、基本类型只有值、而装箱类型具有它们的只不同的统一性。换句话说，两个装箱基本类型具有相同的值不同的同一性。
2、基本类型只有功能完备的只，每个装箱类型除了有基本类型所有的功能值之外，还有非功能值null
3、基本类型通常比装箱类型更节省时间和空间。

五十、如果其他类型更合适，则尽量避免使用字符串
1、字符串不适合代替其他的值类型。
2、字符串不适合代替枚举类型
3、字符串不适合代替聚集类型
4、字符串不适合代替能力表

五十一、当心字符串连接的性能
1、为连接n个字符串二重复的使用字符串连接操作符，需要n的平方级的时间
2、为了可以接受的性能，请使用StringBuilder替代String

五十二、通过接口引用对象
1、如果有合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明
2、使用接口作为类型，程序会更加灵活
3、如果没有合适的接口存在，完全可以使用类而不是接口来引用对象

五十三、接口优先于反射机制
1、使用反射的代价
	1、丧失了编译时类型检查的好处
	2、执行反射访问所需要的代码非常笨拙和冗长
	3、性能损失
2、普通应用程序在运行时不应该以反射方式访问对象
3、如果只是以非常有限的形式使用反射机制，虽然也要付出少许待见，但是可以活得许多好处。通过反射方式创建实例，然后通过它们的接口或者超类，以
正常方式访问这些实例。

五十四、谨慎的使用本地方法
使用本地方法来提高性能的做法不值得提倡。

五十五、谨慎的进行优化
优化方面，遵守的原则
1、不要进行优化
2、还是不要进行优化
3、要努力编写好的程序，而不是快的程序
4、努力避免哪些限制性能的设计决策

五十六、遵守普调接受的命名惯例





































































