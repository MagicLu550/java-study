二十三、请不要在新代码中使用原生态类型
1、如果使用了原生态类型，就失去了泛型在安全性和表述性方面的全部优势。
参数化类型 List<String>
实际类型参数 String
泛型 List<E>
形式类型参数 E
无限制通配符类型 List<?>
原生态类型 List
有限制类型参数 <E extends Number>
递归类型限制 <E extends Comparable<T>>
有限制通配符类型 List<? extends Number>
泛型方法 static <E> List<E> asList
类型令牌 String.class

二十四、消除非受检异常
1、尽可能消除所有非受检异常
2、如果无法消除，同时可以证明引起警告的代码是类型安全的，可以使用@SuppressWarnings，来禁止警告。

二十五、列表优先数组
数据和泛型有非常不同的类型规则，数组是协变且可以具体化的，泛型是不可变且可以被擦除的。因此数组提供了运行时的类型安全、但是没有编译时的
类型安全。反之，对于泛型也一样。

二十六、优先考虑泛型
使用泛型要比在客户端代码中进行转换的类型来得更加安全，也更加容易。

二十七、优先考虑泛型方法
1、静态工具方法，尤其适用于泛型
2、泛型方法就像泛型一样，使用起来比要求客户端传输输入参数并返回值的方法来得更加安全，也更加容易。就像新类型一样，应该确保新方法可以不用转换
就能够使用。

二十八、雷同有限制通配符来提升API的灵活性
1、为了获取最大限度的灵活性，要在表示生产者或者消费者的输入参数上使用通配符类型。
2、不要用通配符类型作为返回类型

二十九、有限考虑类型安全的异构容器




























