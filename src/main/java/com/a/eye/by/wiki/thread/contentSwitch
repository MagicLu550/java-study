一、如何减少上下文切换
1、无锁并发编程
多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，例如将数据的ID按照HASH取模分段，不同的线程处理不同段
的数据。
2、CAS算法
Java的Atomic包使用了CAS算法来更新数据，而不需要加锁。
3、使用最少线程
避免创建不需要的线程，例如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态
4、使用协程
在单线程中实现多任务的调度，并在单线程中维持多个任务的切换

二、查看jstack文件
jstack 31031 > /home/aa/baiyang/bb
grep java.lang.Thread.State bb | awk '{print $2$3$4$5}' |sort |uniq -c

三、避免死锁的方法
1、避免一个线程同时获取多个锁
2、避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
3、尝试使用定时锁，使用lock.tryLock(timeout)来替换使用内部锁机制
4、对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。

四、锁机制实现的原理
1、JVM内部实现了很多种锁机制，有偏向锁、轻量级锁和互斥锁，除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程进入同步块时，使用循环CAS来获取锁
，当它退出同步块时使用循环CAS释放锁。









