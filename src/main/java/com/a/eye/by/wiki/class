一、简介
1：任何一个Class文件都对应唯一一个类或者接口的定义信息。Class文件是一组8位字节码为基础单位的二进制流，各个项目岩哥按照顺序紧凑的排列在Class文件中，中间没有添加任何的分隔符，Class文件存储的几乎是全部的必要数据。
2：Class文件格式采用二中类型数据：无符号数和表。无符号数：无符号数属于基本数据类型，用来描述数字、索引引用、数量值或者按照UTF-8编码组成的字符串。表：是由多个无符号数或者其他表作为数据项构成的符合数据类型，所有的表都习惯性的以"_info"结尾。
3：每个Class文件的头4个字节成为"魔数"，它的唯一作用就是确定这个文件是否为一个能够被虚拟机接受的Class文件，很多文件存储标准中都使用魔数来进行身份识别。
4：Class文件的魔数值为oxCAFEBABE
二、类的加载时机
1、类从加载到虚拟机内存开始，到卸载出内存位置。它的生命周期包括：加载、连接、初始化、使用、卸载。连接：验证、准备、解析。
三、类的初始化
1、遇到new、getstatic、putstatic或invokestatic这4条字节码指令的时候，如果类没有初始化，则需要初始化。new创建一个对象，获取或者设置静态属性、调用静态方法时，需要初始化。
2、使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。
3、当初始化一个类的时候，发现其父类没有初始化，则需要先触发其父类的初始化。
4、当使用jdk7动态语言支持时，有些方法句柄对应的类，没有进行初始化，需要触发其初始化。
四、类的加载过程
1、在加载阶段，虚拟机需要完成一下3件事情，1：通过一个类的权限名来获取定义此类的二进制字节流。
2：将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。3：在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

