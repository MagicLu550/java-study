一、
RDBMS所使用的存储架构并不局限于B树，也不是所有的NoSQL解决方案采用的都与RDBMS不同。

二、B+树
B+树的一些特性使其能够通过主键对记录进行高效插入、查询以及删除。它表示了一个动态的、多层的并有上下界的索引。同时要注意维护每一段（页表）所
包含的主键数目。分段B+树的效果远远好于二叉树的数据划分，大大减少了查询特定主键所需的IO操作。
除此之外B+树能够提供搞笑的范围扫描功能，这得益于它的叶子节点互相连接并且按照主键有序，扫描时避免了耗时遍历树操作。
这也是B+树被关系型数据库用作索引的原因之一。

三、LSM树
LSM树按照另外一种方式组织数据。输入数据首先被存储在日志文件中，这些文件内的数据完全有序。当有日志文件被修改时，对应的更新会先被保存到内存中
来加速查询。
当系统经历多次修改时，且内存空间被逐渐占满后，LSM树会把有序的"键-记录"对写到磁盘中，同时创建一个新的数据文件。此时，因为最新的修改都被持久化了
内存中保存的最新更新就可以被丢弃了。
存储文件的组织与B树相似，不过其为磁盘顺序读取做了优化，所有节点都是满的并按页存储。修改数据文件的操作通过滚动合并完成，也就是说，系统将现有的
页与内存刷写数据混合在一起进行管理，直到数据库达到它的容量。
多次数据刷写后会创建许多数据存储文件，后台线程就会自动将小文件聚合成大文件，这样磁盘查找就会被限制在少数几个数据存储文件中。磁盘上的树结构也可以
拆分成独立的小单元，这样更新就可以被分散到多个数据存储文件中。所有的数据存储文件都按键拍训，所以没有必要在存储文件中为新的键预留位置。
查询时先查找内存中的存储，然后再查找磁盘上的文件。这样在客户端看来数据存储文件的位置是透明的。
删除是一个特殊的更改，当删除标记被存储之后，查找会跳过这些删除过的键。当页被重写时，有删除标记的键会被丢弃。
后台运维过程可以处理预先设定的删除请求。这些请求由TTL触发，例如，当TTTL设为20天后，合并进程会检查这些预设的时间戳，同事在重写数据块时丢弃过期的记录。

B树和LSM树最主要的区别在于它们的结构如何利用硬件，特别是磁盘。