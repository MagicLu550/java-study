一、Storm介绍
storm是一个分布式的、容错的实时计算系统

二、Storm实时低延迟,主要有两个原因
1、storm进程是常驻内存的,不像hadoop里面是不断的启停的,就没有不断启停的开销。
2、Storm的数据是不经过磁盘的,都是在内存里面,处理完就没有了,数据的交换经过网络,这样就避免磁盘IO的开销,所以Storm可以很低的延迟。

三、Storm和hadoop的区别
1、数据来源:HADOOP是HDFS上某个文件夹下的可能是成TB的数据,STORM是实时新增的某一笔数据。
2、处理过程:HADOOP是分MAP阶段到REDUCE阶段,STORM是由用户定义处理流程, 流程中可以包含多个步骤,每个步骤可以是数据源(SPOUT)或处理逻辑(BOLT)。
3、是否结束:HADOOP最后是要结束的,STORM是没有结束状态,到最后一步时,就停在那,直到有新数据进入时再从头开始。
4、处理速度:HADOOP是以处理HDFS上大量数据为目的,速度慢,STORM是只要处理新增的某一笔数据即可，可以做到很快。
5、适用场景:HADOOP是在要处理一批数据时用的,不讲究时效性,要处理就提交一个JOB,STORM是要处理某一新增数据时用的,要讲时效性。
6、与MQ对比:HADOOP没有对比性,STORM可以看作是有N个步骤,每个步骤处理完就 向下一个MQ发送消息,监听这个MQ的消费者继续处理。

四、架构:
– Nimbus
– Supervisor – Worker
• 编程模型: – DAG
– Spout – Bolt
• 数据传输: – Zmq
• Zmq也是开源的消息传递的框架,虽然叫mq,但它并不是一个message queue,而是一个封装的比较好的。
– Netty
• netty是NIO的网络框架,效率比较高。之所以有netty是storm在apache之后呢, zmq的license和storm的license不兼容的,bolt处理完消息后会告诉Spout。

五、高可用性:
 – 异常处理
– 消息可靠性保证机制
• 可维护性:
– Storm有个UI可以看跑在上面的程序监控

Nimbus
– 集群管理
– 调度topology
• Supervisor – 启停worker
• Worker
– 一个JVM进程资源分配的单位 – 启动executor
• Executor
– 实际干活的线程
• Zookeeper

ZK:存储状态信息,调度信息,心跳
• nimbus:相当于master,storm是master/slave的架构
– 它负责两个事情,第一个负责管理集群,这些slave都向zookeeper写 信息,然后nimbus通过zk获取这些slave节点的信息,这样nimbus就 知道集群里面有多少个节点,节点处于什么样的状态,都运行着什么 样的任务
– 第二就是调度topology,当一个topology通过接口提交到集群上面之 后呢,负责把topology里面的worker分配到supervisor上面去执行
• supervisor:每台机器会起一个supervisor进程,supervisor 就是slave
– supervisor其实就干一件事情,就是启停worker,当nimbus调用之后 呢,supervisor去把worker启动起来,这样的话worker就可以开始干活了

worker:实际干活的呢是worker,每个机器上面supervisor 会启动很多个worker,每个机器会配置一定的worker,比如 4个worker
• 一个worker呢,其实就是一个jvm,JVM做什么事情呢,其实 就干两件事情,第一件事情就是启动executor,第二件事情 呢它负责worker与worker之间,比如这里还有worker,这里 还有worker,负责同一个topolopy中worker和worker之间 的传输,task这些数据传输是通过worker来做的,topology 和topology之间呢是没有任何相关性的
• executor:真正干活的是worker里面的executor
– worker启动executor,那executor做什么事情呢,executor就是执行 我们的Spout、Bolt里面的nextTuple()、execute()这些回调函数的, 是真正运行的线程

nimbus,如果各个节点都向它汇报,如果nimbus一旦挂了,那就存 在这些个状态信息怎么恢复的问题,各个节点连不上的时候,怎么处理的 问题,所以storm它的做法是各个节点都把状态信息往zk上写,
因为zk我 们认为是可靠地,这样比如说如果nimbus挂了,那再新起一个nimbus, 它去zk上面去取Supervisor的信息,它就可以立刻知道supervisor处于一 个什么状态,supervisor也一样,
它不需要与nimbus通信,它的心跳是往 zk上面写的,而它启动task的时候呢,也不是从nimbus上面要task,而是 nimbus把Task放到zookeeper上面去,然后supervisor再去zk上面去读, 
然后读到task之后呢再去启动task,所以相互之间通过zk做了一个解耦, zk又是高可用的,非常好的,又是集群的方式,达到了一个非常高的稳定 性,这个从架构上来讲的话呢,比hadoop的架构要更先进一些了




















