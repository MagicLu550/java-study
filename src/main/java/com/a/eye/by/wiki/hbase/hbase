一、Hbase
1、Hbase是一个开源可伸缩的针对海量数据存储的分布式nosql数据库，它根据google的bigtable数据模型来建模，在Hadoop的hdfs存储系统之上。
2、Hbase又可以看成是行键、标识列、时间戳标识的有序map数据结构的数据库，具有稀疏，分布式、持久化，多纬度特点。

二、Hbase数据模型
1、Hbase的数据模型也是由一张张表组成，每张表里也有数据行和列，但是Hbase数据库中的行和列又和关系型数据库的稍有不同。
2、表(Table): HBase会将数据组织进一张张的表里面，但是需要注意的是表名必须是能用在文件路径里的合法名字，因为HBase的表是映射成hdfs上面的文件。
3、行(Row): 在表里面，每一行代表着一个数据对象，每一行都是以一个行键（Row Key）来进行唯一标识的，行键并没有什么特定的数据类型，以二进制的字节来存储。
4、列族(Column Family): 在定义HBase表的时候需要提前设置好列族, 表中所有的列都需要组织在列族里面，列族一旦确定后，就不能轻易修改，因为它会影响到HBase真实的物理存储结构，
但是列族中的列标识(Column Qualifier)以及其对应的值可以动态增删。表中的每一行都有相同的列族，但是不需要每一行的列族里都有一致的列标识(Column Qualifier)和值，所以说是一种稀疏的表结构，这样可以一定程度上避免数据的冗余。
例如：{row1, userInfo: telephone —> 137XXXXX869 }{row2, userInfo: fax phone —> 0898-66XXXX } 行1和行2都有同一个列族userinfo，但是行1中的列族只有列标识(Column Qualifier):移动电话号码，而行2中的列族中只有列标识(Column Qualifier):传真号码。
5、列标识(Column Qualifier): 列族中的数据通过列标识来进行映射，其实这里大家可以不用拘泥于“列”这个概念，也可以理解为一个键值对,Column Qualifier就是Key。列标识也没有特定的数据类型，以二进制字节来存储。
6、单元(Cell): 每一个行键，列族和列标识共同组成一个单元，存储在单元里的数据称为单元数据，单元和单元数据也没有特定的数据类型，以二进制字节来存储。
7、 时间戳(Timestamp): 默认下每一个单元中的数据插入时都会用时间戳来进行版本标识。读取单元数据时，如果时间戳没有被指定，则默认返回最新的数据，写入新的单元数据时，如果没有设置时间戳，默认使用当前时间。
每一个列族的单元数据的版本数量都被HBase单独维护，默认情况下HBase保留3个版本数据。
8、 HBase提供了丰富的API接口让用户去操作这些数据。主要的API接口有3个，Put，Get，Scan。Put和Get是操作指定行的数据的，所以需要提供行键来进行操作。
Scan是操作一定范围内的数据，通过指定开始行键和结束行键来获取范围，如果没有指定开始行键和结束行键，则默认获取所有行数据。

三、HBase的表设计中需要注意的问题
1. Row Key的结构该如何设置，而Row Key中又该包含什么样的信息（这个很重要，下面的例子会有说明）
2. 表中应该有多少的列族
3. 列族中应该存储什么样的数据
4. 每个列族中存储多少列数据
5. 列的名字分别是什么，因为操作API的时候需要这些信息
6. 单元中(cell)应该存储什么样的信息
7. 每个单元中存储多少个版本信息

四、HBase一些关键特性的总结
1. Row Key是HBase表结构设计中很重要的一环，它设计的好坏直接影响程序和HBase交互的效率和数据存储的性能。
2. Base的表结构比传统关系型数据库更灵活，你能存储任何二进制数据在表中，而且无关数据类型。
3. 在相同的列族中所有数据都具有相同的接入模式
4. 主要是通过Row Key来建立索引
5. 以纵向扩张为主设计的表结构能快速简单的获取数据，但牺牲了一定的原子性，就比如上文中最后一种表结构；而以横向扩张为主设计的表结构，也就是列族中有很多列，比如上文中第一种表结构，能在行里面保持一定的原子性。
6. HBase并不支持事务，所有尽量在一次API请求操作中获取到结果
7. 对Row Key的Hash优化能获得固定长度的Row Key并使数据分布更加均匀一些，而不是集中在一台服务器上，但是也牺牲了一定的数据排序和读取性能。
8. 可以利用列标识(Column Qualifier)来存储数据。
9. 列标识(Column Qualifier)名字的长度和列族名字的长度都会影响I/O的读写性能和发送给客户端的数据量，所以它们的命名应该简洁！


背景知识
HBase基本类型定义：
Table：表 
RowKey：行健，主键
Column Family：列族，包含一个或者多个相关列
Column：属于某一个columnfamily，familyName:columnName，每条记录可动态添加
timestamp：每次操作对应的时间戳，支持用户自定义，默认为当前时间的毫秒值
value：值，和timestamp一起支持多version的概念

通过HBase Shell可以拿到一条数据，如下：
hbase(main):007:0> scan 'bi.dpdim_imei_dpid_mapping',{LIMIT=>1}
ROW                                                COLUMN+CELL                                                                                                                                       
352784041181135                            column=dim:dpid, timestamp=1400657685457, value=4369382019346202985 
对应内容：
352784041181135 =》 RowKey
dim =》 Column Family
column =》 dpid
timestamp => 1400657685457
4369382019346202985  => value

HBase存储结构：
1.HBase以表（HTable）的形式存储数据
2.HTable包括很多行，每行通过RowKey唯一标记，行按照RowKey的字典序排列，表在行的方向上分割为多个HRegion
3.每行包括一个RowKey和多个Column Family，数据按照Column Family进行物理切割，即不同Column Family的数据放在不同的Store中，一个Column Family放在一个Strore中
4. HRegion由多个Store组成。一个Store由物理上存在的一个MemStrore（内存中）和多个StoreFile（HFile）中
设计
从应用角度，有两点比较重要：
1. HBase中RowKey是按照字典序排列的
2. 不同Column Family的数据，在物理上是分开的

在做table设计的时候，主要围绕上述两点做文章。
RowKey的设计需要根据请求数据特点：
1.单个查询，需要尽量缩小Key的长度
2.范围查询，根据RowKey按字典序排列的特点，针对查询需求设计rowkey，保证范围查询的rowkey在物理上存放在一起
Column Family的设计需遵循：尽量避免一次请求需要拿到的Column分布在不同的Column Family中

实例
对于基于RowKey的范围查询设计，我们来看一个实例：
1. 给出userid，返回这个userid最近插入的N条数据 
2. 给出userid，及一个时间区间，返回这个时间区间的N条数据


















