一、上下文切换
CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。
所以任务从保存到再加载的过程就是一次上下文切换。

二、如何减少上下文切换
1、无锁并发编程。多线程竞争锁时会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，例如将数据的ID按照Has算法取模分段，不同的线程处理不同的数据。
2、CAS算法。使用CAS算法来更新数据，不需要加锁。
3、使用最少线程。避免创建不必要的线程。
4、协程。在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。

三、避免死锁的几个常见方法
1、避免一个线程同时获取多个锁
2、避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
3、尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。
4、对于数据锁，加锁和解锁必须在一个数据库的连接里，否则会出现解锁失败的情况。

四、资源限制的挑战
1、对于硬件资源：可以考虑使用集群并行执行程序。既然单机的资源有限制，那么就让程序在多机器上运行。
2、对于软件资源：可以考虑使用资源池，将资源复用。