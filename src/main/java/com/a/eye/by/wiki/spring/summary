一、Spring IOC：
1、控制反转，依赖注入，目的是解耦，内部实现是反射。
2、Spring bean 容器，AutoWired 默认是byType。
3、Resource 默认是byName，也可以是byType
4、postConstruct 在bean初始化完成之后执行
5、preDestory 在bean销毁前调用
6、通过在类上使用 @Repository、@Component、@Service 和 @Constroller 注解，Spring 会自动创建相应的 BeanDefinition
对象，并注册到 ApplicationContext 中。这些类就成了 Spring 受管组件。这三个注解除了作用于不同软件层次的类，
其使用方式与 @Repository 是完全相同的。
二、spring bean 的生命周期
1、init-method
2、destory-method
三、Sping bean的作用范围（scope）
1、singleton
2、prototype
3、request
4、session
5、global

四、Spring AOP:
1、Spring aop的实现是通过jdk的动态代理，和CGLib。
2、jdk的动态代理基于接口，需要先定义接口。
3、jdk的动态代理，实现InvocationHandler接口，重写invoke方法，new Proxy.newProxyInstance(ClassLoader,interfaces,invocationHandler)
4、cglib是针对类来实现代理的，实现原理是针对指定的类生成一个子类，并覆盖其中的方法，实现增强，因为采用的是继承，所以不能对final的类
进行处理。

五、Spring 声明式事物
1、PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，那么新建一个事务。
2、PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，那么以非事务的方式执行。
3、PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，则抛出异常。
4、PROPAGATION_REQUIRES_NEW 新建一个事务，如果当前存在事务，则把当前事务挂起。
5、PROPAGATION_NOT_SUPPORTED 以非事务的方式执行，如果当前存在事务，则把当前事务挂起。
6、PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
7、PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。

六、SpringMVC原理
1、客户端请求提交到DispatcherServlet
2、由DispatcherServlet控制器查询一个或者多个HandlerMapping，找到对应处理请求的Controller
3、DispatcherServlet将请求提交给Controller
4、Controller调用业务逻辑处理请求，并返回ModelAndView
5、DispatcherServlet查询一个或者多个ViewResolver视图解析器，找到ModelAndView对应的视图。
6、视图负责将结果展示到客户端。
