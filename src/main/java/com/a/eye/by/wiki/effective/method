三十八、检查参数的有效性
每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制。应该把这些限制写到文档中，并且在这个方法体的开头出，通过显示的检查来
实施这些限制。

三十九、必要时进行保护性拷贝
1、对于构造器的每个可变参数进行保护性拷贝是有必要的
2、保护性拷贝是在检查参数的有效性之前进行的，并且有效检查是针对拷贝之后的对象，而不是针对原始的对象。
3、对于参数类型可以被不可信任放子类化的参数，请不要使用clone方法进行保护性拷贝。
总结：类具有从客户端得到或者返回到客户端的可变组件，类就必须保护性地拷贝这些组件，如果拷贝的成本不受限制，并且信任客户端不会修改组件，就可以在文档中说明，来替代保护性拷贝。

四十、谨慎的设计方法签名
1、谨慎的选择方法的名称
2、不要过于追求提供便利的方法
3、避免过长的参数列表

四十一、谨慎使用重载
1、安全而保守的策略是永远不要导出两个皆有相同参数数目的重载方法，如果方法使用可变参数，保守策略是根本不要重载它。

四十二、慎用可变参数
1、可变参数方法接受0个或者多个指定的类型参数。可变参数机制通过先创建一个数组，数组的大小为在调用位置所传递的参数数量，然后将参数值传递到数组中，
最后数组传递给方法。

四十三、返回玲长度的数组或者集合，而不是null

四十四、为所有导出的API元素编写文档注释
1、为了正确地编写API文档，必须在每个被导出的类、接口、构造器、方法和域声明之前增加一个文档注释。
2、放大的文档注释应该简洁地描述它和客户端之间的约定。
要为API编写文档，文档注释是最好、最有效的途径。对于所有可导出的API元素来说，使用文档注释应该被看做是强制性。要采用一致的风格来遵循标准的约定
在文档注释内部出现任何HTML标签都是允许的，但是HTML元字符必须要经过转义。



























